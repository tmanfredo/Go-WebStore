// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"go-store/types"
)

func Products(products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>GameHalt - Order Entry</title><link rel=\"stylesheet\" href=\"assets/styles/stylesProducts.css\"><link rel=\"icon\" type=\"image/x-icon\" href=\"assets/images/page_icon.ico\"><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = header(2).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"product_container\"><div id=\"products\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ProductTable(products).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><aside id=\"aside\"><p id=\"alert\" style=\"color: red\"></p><form id=\"form\"><fieldset id=\"formBody\"><legend>Game Information</legend> <label class=\"required\" for=\"name\">Game Name</label> <input id=\"name\" type=\"text\" pattern=\"[A-Za-z&#39; ]+\" title=\"Input only letters, spaces, or &#39;\" name=\"name\" required><br><label class=\"required\" for=\"image\">Image Path</label> <input id=\"image\" type=\"text\" pattern=\"[A-Za-z0-9./- ]+\" title=\"Enter a path that is valid (letters, numbers, hyphens, and other path symbols)\" name=\"image\" required><br><label for=\"quantity\">Quantity </label> <input id=\"quantity\" type=\"number\" placeholder=\"1\" min=\"0\" max=\"100\" name=\"quantity\"><br><label for=\"price\">Price</label> <input id=\"price\" name=\"price\" type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\"><br><label for=\"inactive\">Inactive?</label> <input id=\"inactive\" name=\"inactive\" type=\"checkbox\"><br></fieldset><input id=\"create\" type=\"button\" value=\"Add Game\"> <input id=\"update\" type=\"button\" value=\"Update\"> <input id=\"delete\" type=\"button\" value=\"Delete\"></form><br><em>If updating/deleting a game, click on the table entry!<br>The highlighted row will be modified/deleted!<br>Games with no orders can be deleted!</em></aside></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\r\n        $(document).ready(function () {\r\n            var productId = -1;\r\n            var tableClicked = false;\r\n            setTimeout(highlight_row, 0);\r\n\r\n            $(\"#create\").click(function (e) {\r\n                if (!checkRequired($(\"#name\").val(), $(\"#image\").val())) {\r\n                    return;\r\n                }\r\n                else {\r\n                    let xhttp = new XMLHttpRequest();\r\n                    let productTable = document.getElementById(\"products\");\r\n                    xhttp.onreadystatechange = function () {\r\n                        if (this.readyState == 4 && this.status == 200) {\r\n                            productTable.innerHTML = this.responseText;\r\n                            setTimeout(highlight_row, 0);\r\n                        }\r\n\r\n                    };\r\n                    var inactive;\r\n                    if ($('#inactive').prop('checked')) inactive = \"1\";\r\n                    else inactive = \"0\";\r\n                    xhttp.open(\"POST\", \"product_change?crud=create&name=\" + $(\"#name\").val() + \"&image=\" + $(\"#image\").val() + \"&quantity=\" +\r\n                        $(\"#quantity\").val() + \"&price=\" + $(\"#price\").val() + \"&inactive=\" + inactive, true);\r\n                    xhttp.send();\r\n                    $('#form')[0].reset();\r\n                }\r\n            })\r\n\r\n            $(\"#update\").click(function (e) {\r\n\r\n                if (!checkRequired($(\"#name\").val(), $(\"#image\").val())) {\r\n                    return;\r\n                }\r\n                else if (!tableClicked) {\r\n                    alert(\"Products can only be updated through clicking a table's product first!\")\r\n                }\r\n                else {\r\n                    let xhttp = new XMLHttpRequest();\r\n                    let productTable = document.getElementById(\"products\");\r\n                    xhttp.onreadystatechange = function () {\r\n                        if (this.readyState == 4 && this.status == 200) {\r\n                            productTable.innerHTML = this.responseText;\r\n                            setTimeout(highlight_row, 0);\r\n                        }\r\n\r\n                    };\r\n                    var inactive;\r\n                    if ($('#inactive').prop('checked')) inactive = \"1\";\r\n                    else inactive = \"0\";\r\n                    xhttp.open(\"POST\", \"product_change?crud=update&id=\" + productId + \"&name=\" + $(\"#name\").val() + \"&image=\" + $(\"#image\").val() + \"&quantity=\" +\r\n                        $(\"#quantity\").val() + \"&price=\" + $(\"#price\").val() + \"&inactive=\" + inactive, true);\r\n                    xhttp.send();\r\n                    $('#form')[0].reset();\r\n                }\r\n            })\r\n\r\n            $(\"#delete\").click(function (e) {\r\n                let xhttp = new XMLHttpRequest();\r\n                xhttp.onreadystatechange = function () {\r\n                    if (this.readyState == 4 && this.status == 200) {\r\n                        if (this.responseText !== \"\") {\r\n                            alert(\"You cannot delete this product as it has active orders!\\nMaking it inactive may ensure this issue does not come up again!\")\r\n                            setTimeout(highlight_row, 0);\r\n                            return;\r\n                        }\r\n\r\n                        if (!checkRequired($(\"#name\").val(), $(\"#image\").val())) {\r\n                            return;\r\n                        }\r\n                        else if (!tableClicked) {\r\n                            alert(\"Products can only be deleted through clicking a table's product first!\");\r\n                            return;\r\n                        } else if (confirm(\"Are you sure you want to delete this product?\")) {\r\n                            let xhttp2 = new XMLHttpRequest();\r\n                            let productTable = document.getElementById(\"products\");\r\n                            xhttp2.onreadystatechange = function () {\r\n                                if (this.readyState == 4 && this.status == 200) {\r\n                                    productTable.innerHTML = this.responseText;\r\n                                    setTimeout(highlight_row, 0);\r\n                                }\r\n                            };\r\n                            xhttp2.open(\"POST\", \"product_change?crud=delete&id=\" + productId, true);\r\n                            xhttp2.send();\r\n                            $('#form')[0].reset();\r\n                        }\r\n                    }\r\n                };\r\n                xhttp.open(\"POST\", \"product_change?crud=deleteRequest&id=\" + productId, true);\r\n                xhttp.send();\r\n            });\r\n\r\n\r\n            function checkRequired(name, image) {\r\n                let alertMessage = \"\";\r\n                if (image == \"\") {\r\n                    alertMessage += \"Game Image should not be blank!<br>\";\r\n                    document.getElementById(\"image\").focus();\r\n                }\r\n                if (name == \"\") {\r\n                    alertMessage += \"Game Name should not be blank!<br>\";\r\n                    document.getElementById(\"name\").focus();\r\n                }\r\n\r\n                if (alertMessage !== \"\") {\r\n                    document.getElementById(\"alert\").innerHTML = alertMessage;\r\n                    return false;\r\n                } else {\r\n                    document.getElementById(\"alert\").innerHTML = \"\";\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            function highlight_row() {\r\n                var table = document.getElementById('product_table');\r\n                var cells = table.getElementsByTagName('td');\r\n                tableClicked = false;\r\n                for (var i = 0; i < cells.length; i++) {\r\n                    // Take each cell\r\n                    var cell = cells[i];\r\n                    // do something on onclick event for cell\r\n                    cell.onclick = function () {\r\n                        tableClicked = true;\r\n                        // Get the row id where the cell exists\r\n                        var rowId = this.parentNode.rowIndex;\r\n\r\n                        var rowsNotSelected = table.getElementsByTagName('tr');\r\n                        for (var row = 0; row < rowsNotSelected.length; row++) {\r\n                            rowsNotSelected[row].style.backgroundColor = \"\";\r\n                            rowsNotSelected[row].classList.remove('selected');\r\n                        }\r\n                        var rowSelected = table.getElementsByTagName('tr')[rowId];\r\n                        rowSelected.style.backgroundColor = \"yellow\";\r\n                        rowSelected.className += \" selected\";\r\n\r\n                        document.getElementById(\"name\").value = rowSelected.cells[0].innerHTML;\r\n                        document.getElementById(\"image\").value = rowSelected.cells[1].innerHTML;\r\n                        document.getElementById(\"quantity\").value = rowSelected.cells[2].innerHTML;\r\n                        document.getElementById(\"price\").value = parseFloat(rowSelected.cells[3].innerHTML.replace('$', ''));\r\n                        if (rowSelected.cells[4].innerHTML == \"Yes\") document.getElementById(\"inactive\").checked = true;\r\n                        else document.getElementById(\"inactive\").checked = false;\r\n                        productId = rowSelected.cells[0].getAttribute(\"data-id\");\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ProductTable(products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h1>Games</h1><table id=\"product_table\"><thead><th>Game</th><th>Product Image</th><th>Quantity</th><th>Price</th><th>Inactive</th></thead> <tbody>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, product := range products {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<tr><td data-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", product.Id))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 232, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(product.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 232, Col: 71}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(product.Image)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 233, Col: 31}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", product.Instock))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 234, Col: 51}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", product.Price))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 235, Col: 52}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if product.Inactive {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<td>Yes</td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<td>No</td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</tbody></table>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
